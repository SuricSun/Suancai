class n{callback(t){return this._callback=t,this}timeMs(t){return this._timeMs=t,this}ease(t){return this._ease=t,this}denominator(t){return this._denominator=t,this}stop(){this._rAF&&(cancelAnimationFrame(this._rAF),this._resolve("cancelled"),this._clear())}complete(){this._rAF&&(cancelAnimationFrame(this._rAF),this.callback(1),this._resolve("completed"),this._clear())}_clear(){this._resolve=this._reject=this._rAF=void 0}run(){return new Promise((t,e)=>{this.__run(t,e)})}__run(t,e){if(!this._timeMs)throw console.error("TimeMs is",this._timeMs),new Error("Invalid Arg: Need at least TimeMs to run this Timer!");this._callback||(this._callback=()=>{});let i=null,s=r=>{i==null&&(i=r);let a=r-i;if(a>=this._timeMs){this._callback(1),t("completed"),this._clear();return}this._callback(a/this._timeMs),this._rAF=requestAnimationFrame(s)};this._resolve=t,this._reject=e,this._rAF=requestAnimationFrame(s)}}class h{static Clamp(t,e,i){return t<e?e:t>i?i:t}static vecLen(){let t=0;for(let e=0;e<arguments.length;e++)t+=arguments[e]*arguments[e];return Math.sqrt(t)}}export{h as M,n as T};
